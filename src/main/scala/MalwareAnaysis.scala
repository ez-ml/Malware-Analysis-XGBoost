package ezml

import org.apache.spark.sql.{DataFrame, Row, SparkSession}

import scala.collection.mutable
import org.apache.spark.ml.feature._
import ml.dmlc.xgboost4j.scala.spark.{XGBoostClassificationModel, XGBoostClassifier}
import org.apache.spark.ml.{Pipeline, PipelineModel}
import org.apache.spark.ml.evaluation.MulticlassClassificationEvaluator

object MalwareAnaysis {

  def main(args: Array[String]): Unit = {

    val num_partition= args(0)
    val alpha = args(1)
    val num_round=args(2)
    val num_classes=args(3)


    val spark = SparkSession
      .builder()
      .enableHiveSupport()
      .getOrCreate()

    val sc=spark.sparkContext


    import spark.implicits._
    import spark.sql

    val featuredData = spark.sql("Select * from malware_tmp_2").repartition(num_partition.toInt);



    val xgbParam = Map(
      "use_external_memory" -> false,
      "min_child_weight" -> 3,
      "num_round" -> num_round,
      "objective" -> "multi:softprob",
      "use_external_memory" -> false,
      "alpha" -> alpha,
      "gamma" -> 0,
      "subsample" -> 0.8,
      "colsample_bytree" -> 0.8,
      "trainTestRatio" -> 0.9,
      "rate_drop" -> 0.1,
      "skip_drop" -> 0.5,
      "seed" -> 12345L

    )


    val xgbClassifier = new XGBoostClassifier(xgbParam)
      .setFeaturesCol("features")
      .setLabelCol("Label")
      .setPredictionCol("prediction")
      .setNumClass(num_classes.toInt)



    //val labelIndexer = new StringIndexer().setInputCol("Label").setOutputCol("labelIndex").fit(featuredData)
    //val dataPrepared = labelIndexer.transform(featuredData).select("features", "Label", "labelIndex")


    val xgbClassificationModel = xgbClassifier.fit(featuredData)
    val predictionsDf = xgbClassificationModel.transform(featuredData)
    predictionsDf.show()


    val evaluator = new MulticlassClassificationEvaluator()
      .setLabelCol("Label")
      .setPredictionCol("prediction")
      .setMetricName("accuracy")


    val accuracy = evaluator.evaluate(predictionsDf)
    println("#####################################################################")
    println("Accuracy = "+ (accuracy * 100) + " %")
    println("#####################################################################")


  }


}
